{
  "_args": [
    [
      {
        "raw": "https://github.com/petermetz/cordova-plugin-ibeacon.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/petermetz/cordova-plugin-ibeacon.git",
        "spec": "git+https://github.com/petermetz/cordova-plugin-ibeacon.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:petermetz/cordova-plugin-ibeacon.git",
          "sshUrl": "git+ssh://git@github.com/petermetz/cordova-plugin-ibeacon.git",
          "httpsUrl": "git+https://github.com/petermetz/cordova-plugin-ibeacon.git",
          "gitUrl": "git://github.com/petermetz/cordova-plugin-ibeacon.git",
          "shortcut": "github:petermetz/cordova-plugin-ibeacon",
          "directUrl": "https://raw.githubusercontent.com/petermetz/cordova-plugin-ibeacon/master/package.json"
        }
      },
      "C:\\slickb"
    ]
  ],
  "_from": "git+https://github.com/petermetz/cordova-plugin-ibeacon.git",
  "_id": "com.unarin.cordova.beacon@3.4.1",
  "_inCache": true,
  "_location": "/com.unarin.cordova.beacon",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/petermetz/cordova-plugin-ibeacon.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/petermetz/cordova-plugin-ibeacon.git",
    "spec": "git+https://github.com/petermetz/cordova-plugin-ibeacon.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:petermetz/cordova-plugin-ibeacon.git",
      "sshUrl": "git+ssh://git@github.com/petermetz/cordova-plugin-ibeacon.git",
      "httpsUrl": "git+https://github.com/petermetz/cordova-plugin-ibeacon.git",
      "gitUrl": "git://github.com/petermetz/cordova-plugin-ibeacon.git",
      "shortcut": "github:petermetz/cordova-plugin-ibeacon",
      "directUrl": "https://raw.githubusercontent.com/petermetz/cordova-plugin-ibeacon/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/petermetz/cordova-plugin-ibeacon.git#0bba4958766e95dd94db005798f33d0b1793153d",
  "_shasum": "f38212f127ccbdecaa578f780aae0ad812c20bb2",
  "_shrinkwrap": null,
  "_spec": "https://github.com/petermetz/cordova-plugin-ibeacon.git",
  "_where": "C:\\slickb",
  "author": {
    "name": "Peter Metz",
    "email": "peter.metz@unarin.com",
    "url": "Somogyvari"
  },
  "bugs": {
    "url": "https://github.com/petermetz/cordova-plugin-ibeacon/issues"
  },
  "cordova": {
    "id": "com.unarin.cordova.beacon",
    "platforms": [
      "ios",
      "android"
    ]
  },
  "dependencies": {},
  "description": "Proximity Beacon Monitoring and Transmission Plugin (supporting iBeacons)",
  "devDependencies": {},
  "gitHead": "0bba4958766e95dd94db005798f33d0b1793153d",
  "homepage": "https://github.com/petermetz/cordova-plugin-ibeacon",
  "keywords": [
    "cordova",
    "ibeacon",
    "beacon",
    "bluetooth",
    "le",
    "ecosystem:cordova",
    "cordova-ios",
    "cordova-android"
  ],
  "license": "Apache 2.0",
  "name": "com.unarin.cordova.beacon",
  "optionalDependencies": {},
  "readme": "<!---\r\n license: Licensed to the Apache Software Foundation (ASF) under one\r\n         or more contributor license agreements.  See the NOTICE file\r\n         distributed with this work for additional information\r\n         regarding copyright ownership.  The ASF licenses this file\r\n         to you under the Apache License, Version 2.0 (the\r\n         \"License\"); you may not use this file except in compliance\r\n         with the License.  You may obtain a copy of the License at\r\n\r\n           http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n         Unless required by applicable law or agreed to in writing,\r\n         software distributed under the License is distributed on an\r\n         \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n         KIND, either express or implied.  See the License for the\r\n         specific language governing permissions and limitations\r\n         under the License.\r\n-->\r\n\r\n\r\n## ![iBeacon Cordova Plugin](http://icons.iconarchive.com/icons/artua/mac/128/Bluetooth-icon.png) Cordova / Phonegap iBeacon plugin\r\n\r\n### Features\r\n\r\n#### Features available on both Android and iOS\r\n\r\n * Ranging\r\n * Monitoring\r\n \r\n#### Features exclusive to iOS\r\n\r\n * Region Monitoring (or geo fencing), works in all app states. \r\n * Advertising device as an iBeacon\r\n\r\n### Installation\r\n\r\n```\r\ncordova plugin add https://github.com/petermetz/cordova-plugin-ibeacon.git\r\n```\r\n\r\n### Usage\r\n\r\nThe plugin's API closely mimics the one exposed through the [CLLocationManager](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html) introduced in iOS 7.\r\n\r\nSince version 2, the main ```IBeacon``` facade of the DOM is called ```LocationManager``` and it's API is based on promises instead of callbacks.\r\nAnother important change of version 2 is that it no longer pollutes the global namespace, instead all the model classes and utilities are accessible\r\nthrough the ```cordova.plugins.locationManager``` reference chain.\r\n\r\nSince version 3.2 the Klass dependency has been removed and therefore means creation of the delegate has changed.\r\n\r\n#### iOS 8 Permissions\r\n\r\nOn iOS 8, you have to request permissions from the user of your app explicitly. You can do this through the plugin's API.\r\nSee the [LocationManager](https://github.com/petermetz/cordova-plugin-ibeacon/blob/master/www/LocationManager.js)'s \r\nrelated methods: ```requestWhenInUseAuthorization``` and ```requestAlwaysAuthorization``` for further details.\r\n\r\n#### Standard [CLLocationManager](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html) functions\r\n\r\n\r\n##### Creating BeaconRegion DTOs\r\n\r\n```\r\n/**\r\n * Function that creates a BeaconRegion data transfer object.\r\n * \r\n * @throws Error if the BeaconRegion parameters are not valid.\r\n */\r\nfunction createBeacon() {\r\n\r\n    var uuid = '00000000-0000-0000-0000-000000000000'; // mandatory\r\n    var identifier = 'beaconAtTheMacBooks'; // mandatory\r\n    var minor = 1000; // optional, defaults to wildcard if left empty\r\n    var major = 5; // optional, defaults to wildcard if left empty\r\n\r\n    // throws an error if the parameters are not valid\r\n    var beaconRegion = new cordova.plugins.locationManager.BeaconRegion(identifier, uuid, major, minor);\r\n   \r\n    return beaconRegion;   \r\n} \r\n```\r\n \r\n##### Start monitoring a single iBeacon\r\n```\r\nvar logToDom = function (message) {\r\n\tvar e = document.createElement('label');\r\n\te.innerText = message;\r\n\r\n\tvar br = document.createElement('br');\r\n\tvar br2 = document.createElement('br');\r\n\tdocument.body.appendChild(e);\r\n\tdocument.body.appendChild(br);\r\n\tdocument.body.appendChild(br2);\r\n\t\r\n\twindow.scrollTo(0, window.document.height);\r\n};\r\n\r\nvar delegate = new cordova.plugins.locationManager.Delegate();\r\n\t\r\ndelegate.didDetermineStateForRegion = function (pluginResult) {\r\n\r\n    logToDom('[DOM] didDetermineStateForRegion: ' + JSON.stringify(pluginResult));\r\n\r\n    cordova.plugins.locationManager.appendToDeviceLog('[DOM] didDetermineStateForRegion: '\r\n        + JSON.stringify(pluginResult));\r\n};\r\n\r\ndelegate.didStartMonitoringForRegion = function (pluginResult) {\r\n    console.log('didStartMonitoringForRegion:', pluginResult);\r\n\r\n    logToDom('didStartMonitoringForRegion:' + JSON.stringify(pluginResult));\r\n};\r\n\r\ndelegate.didRangeBeaconsInRegion = function (pluginResult) {\r\n    logToDom('[DOM] didRangeBeaconsInRegion: ' + JSON.stringify(pluginResult));\r\n};\r\n\r\nvar uuid = '00000000-0000-0000-0000-000000000000';\r\nvar identifier = 'beaconOnTheMacBooksShelf';\r\nvar minor = 1000;\r\nvar major = 5;\r\nvar beaconRegion = new cordova.plugins.locationManager.BeaconRegion(identifier, uuid, major, minor);\r\n\r\ncordova.plugins.locationManager.setDelegate(delegate);\r\n\r\n// required in iOS 8+\r\ncordova.plugins.locationManager.requestWhenInUseAuthorization(); \r\n// or cordova.plugins.locationManager.requestAlwaysAuthorization()\r\n\r\ncordova.plugins.locationManager.startMonitoringForRegion(beaconRegion)\r\n\t.fail(console.error)\r\n\t.done();\r\n\r\n```\r\n \r\n\r\n##### Stop monitoring a single iBeacon\r\n```\r\nvar uuid = '00000000-0000-0000-0000-000000000000';\r\nvar identifier = 'beaconOnTheMacBooksShelf';\r\nvar minor = 1000;\r\nvar major = 5;\r\nvar beaconRegion = new cordova.plugins.locationManager.BeaconRegion(identifier, uuid, major, minor);\r\n\r\ncordova.plugins.locationManager.stopMonitoringForRegion(beaconRegion)\r\n\t.fail(console.error)\r\n\t.done();\r\n\r\n```\r\n \r\n \r\n##### Start ranging a single iBeacon\r\n```\r\nvar logToDom = function (message) {\r\n\tvar e = document.createElement('label');\r\n\te.innerText = message;\r\n\r\n\tvar br = document.createElement('br');\r\n\tvar br2 = document.createElement('br');\r\n\tdocument.body.appendChild(e);\r\n\tdocument.body.appendChild(br);\r\n\tdocument.body.appendChild(br2);\r\n\t\r\n\twindow.scrollTo(0, window.document.height);\r\n};\r\n\r\nvar delegate = new cordova.plugins.locationManager.Delegate();\r\n\t\r\ndelegate.didDetermineStateForRegion = function (pluginResult) {\r\n\r\n    logToDom('[DOM] didDetermineStateForRegion: ' + JSON.stringify(pluginResult));\r\n\r\n    cordova.plugins.locationManager.appendToDeviceLog('[DOM] didDetermineStateForRegion: '\r\n        + JSON.stringify(pluginResult));\r\n};\r\n\r\ndelegate.didStartMonitoringForRegion = function (pluginResult) {\r\n    console.log('didStartMonitoringForRegion:', pluginResult);\r\n\r\n    logToDom('didStartMonitoringForRegion:' + JSON.stringify(pluginResult));\r\n};\r\n\r\ndelegate.didRangeBeaconsInRegion = function (pluginResult) {\r\n    logToDom('[DOM] didRangeBeaconsInRegion: ' + JSON.stringify(pluginResult));\r\n};\r\n\r\n\r\n\r\nvar uuid = '00000000-0000-0000-0000-000000000000';\r\nvar identifier = 'beaconOnTheMacBooksShelf';\r\nvar minor = 1000;\r\nvar major = 5;\r\nvar beaconRegion = new cordova.plugins.locationManager.BeaconRegion(identifier, uuid, major, minor);\r\n\r\ncordova.plugins.locationManager.setDelegate(delegate);\r\n\r\n// required in iOS 8+\r\ncordova.plugins.locationManager.requestWhenInUseAuthorization(); \r\n// or cordova.plugins.locationManager.requestAlwaysAuthorization()\r\n\r\ncordova.plugins.locationManager.startRangingBeaconsInRegion(beaconRegion)\r\n\t.fail(console.error)\r\n\t.done();\r\n\r\n```\r\n \r\n##### Stop ranging a single iBeacon\r\n```\r\nvar uuid = '00000000-0000-0000-0000-000000000000';\r\nvar identifier = 'beaconOnTheMacBooksShelf';\r\nvar minor = 1000;\r\nvar major = 5;\r\nvar beaconRegion = new cordova.plugins.locationManager.BeaconRegion(identifier, uuid, major, minor);\r\n\r\ncordova.plugins.locationManager.stopRangingBeaconsInRegion(beaconRegion)\r\n\t.fail(console.error)\r\n\t.done();\r\n\r\n```\r\n\r\n##### Determine if advertising is supported (iOS is supported, Android is not yet)\r\n\r\n```\r\ncordova.plugins.locationManager.isAdvertisingAvailable()\r\n    .then(function(isSupported){\r\n        console.log(\"isSupported: \" + isSupported);\r\n    })\r\n    .fail(console.error)\r\n    .done();\r\n\r\n```\r\n\r\n##### Determine if advertising is currently turned on (iOS only)\r\n\r\n```        \r\ncordova.plugins.locationManager.isAdvertising()\r\n    .then(function(isAdvertising){\r\n        console.log(\"isAdvertising: \" + isAdvertising);\r\n    })\r\n    .fail(console.error)\r\n    .done();\r\n\r\n```\r\n\r\n##### Start advertising device as an iBeacon (iOS only)\r\n```\r\nvar uuid = '00000000-0000-0000-0000-000000000000';\r\nvar identifier = 'advertisedBeacon';\r\nvar minor = 2000;\r\nvar major = 5;\r\nvar beaconRegion = new cordova.plugins.locationManager.BeaconRegion(identifier, uuid, major, minor);\r\n\r\n// The Delegate is optional\r\nvar delegate = new cordova.plugins.locationManager.Delegate();\r\n\r\n// Event when advertising starts (there may be a short delay after the request)\r\n// The property 'region' provides details of the broadcasting Beacon\r\ndelegate.peripheralManagerDidStartAdvertising = function(pluginResult) {\r\n    console.log('peripheralManagerDidStartAdvertising: '+ JSON.stringify(pluginResult.region));\r\n};\r\n// Event when bluetooth transmission state changes \r\n// If 'state' is not set to BluetoothManagerStatePoweredOn when advertising cannot start\r\ndelegate.peripheralManagerDidUpdateState = function(pluginResult) {\r\n    console.log('peripheralManagerDidUpdateState: '+ pluginResult.state);\r\n};\r\n\r\ncordova.plugins.locationManager.setDelegate(delegate);\r\n\r\n// Verify the platform supports transmitting as a beacon\r\ncordova.plugins.locationManager.isAdvertisingAvailable()\r\n    .then(function(isSupported){\r\n\r\n        if (isSupported) {\r\n            cordova.plugins.locationManager.startAdvertising(beaconRegion)\r\n                .fail(conole.error)\r\n                .done();\r\n        } else {\r\n            console.log(\"Advertising not supported\");\r\n        }\r\n    })\r\n    .fail(console.error)\r\n    .done();\r\n\r\n```\r\n\r\n##### Stopping the advertising (iOS only)\r\n```\r\ncordova.plugins.locationManager.stopAdvertising()\r\n    .fail(console.error)\r\n    .done();\r\n\r\n```\r\n\r\n##### Enable/Disable BlueTooth (Android only)\r\n\r\n```        \r\ncordova.plugins.locationManager.isBluetoothEnabled()\r\n    .then(function(isEnabled){\r\n        console.log(\"isEnabled: \" + isEnabled);\r\n        if (isEnabled) {\r\n            cordova.plugins.locationManager.disableBluetooth();\r\n        } else {\r\n            cordova.plugins.locationManager.enableBluetooth();        \r\n        }\r\n    })\r\n    .fail(console.error)\r\n    .done();\r\n\r\n```\r\n\r\n## Contributions\r\n\r\n> Contributions are welcome at all times, please make sure that the tests are running without errors\r\n> before submitting a pull request. The current development branch that you should submit your pull requests against is\r\n> \"v3.x\" branch.\r\n\r\n### How to execute the tests - OS X\r\n\r\n#### Prerequisites Of The Test Runner\r\n* [Dart SDK](http://dartlang.org) installed on the path (Tested with: 1.2, 1.3, 1.3.3)\r\n* [NodeJS](http://nodejs.org/)\r\n* [NPM](https://www.npmjs.org/)\r\n* [Cordova NPM package](https://www.npmjs.org/package/cordova) (Tested with: 3.4.0-0.1.3)\r\n* [XCode](https://developer.apple.com/xcode/) (Tested with 5.0.2 and 6.0)\r\n\r\n\r\n```\r\ndart test/run_tests.dart\r\n```\r\n\r\nExecuting the test runner will do the following:\r\n* Generates a Cordova project\r\n* Add the iOS platform\r\n* Installs the iBeacon plugin from the local file-system.\r\n* Launches XCode by opening the project.\r\n\r\n### How to execute the tests - Without the Dart SDK\r\n\r\n* Open an app which has Cordova iBeacon plugin installed in XCode\r\n* Install it onto a device or simulator\r\n* Open Safari\r\n* Go to the dev tools window\r\n* Paste the code from the examples into the javascript console, it should run without any errors.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/petermetz/cordova-plugin-ibeacon.git"
  },
  "version": "3.4.1"
}
